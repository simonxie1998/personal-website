ONTOLOGY_P1 = "For context, AKASA automates revenue cycle operation workflows with RPA and ML. Ontology is a state tracker of the bots within an EHR (Electronic Health Record), so it keeps track of where the bot is within the application as well as how it got there. Ontology also stores the navigation network graph of the configured edges and nodes allowing it to be able to find a path to certain parts of the EHR regardless of the starting point. This graph had previously been configured with yamls in the repository, so any updates to the graph will require manual configuration of the engineer. This poses 3 problems: manual configuration is error prone, it requires engineering bandwidth, there's no standardization of the yaml names/location in the repository polluting it."

ONTOLOGY_P2 = "In a 2 day hacakthon project in March 2022, I built a full fledged CRUD application that allows any user to build an ontology graph. This allows product managers or operations team members to free up time for engineers, validates inputs within the application, and abstracts the yamls into an endpoint allowing engineers to not even have to look at a yaml anymore. This application also supported much more funcationality than just building the graph. It supported versioning logic to undo/redo operations and permanent versioning so that production configurations can be used. Other functionality included toggling on/off labels in the graph, importing existing yamls, downloading the graph as a yaml, and downloading a change log. This project won the best in theme (engineering speed) category for the hackathon."

CCI_P1 = "I joined Klarity as the 5th engineer, and the onboarding process was still very immature. Klarity's product was a revenue checklist, clause extractions, and a document management review system for revenue contract documents, so the onboarding process included user provision, checklist/extractions configuration, integrations setup, and much more. At that time, in order to onboard/modify a customer's account, I would have to manually modify the database directly or write a script. This ate up much of my dev time, I made mistakes in the modifications, and this was not very meaningful work."

CCI_P2 = "Building the next iteration of a customer configuration interface was the solution to this. The current version of CCI allowed an internal user to upload an excel file to onboard a customer's account. However, modifying was not supported very well. Along with the frontend engineer, we embedded a configuration interface within the core application that allowed an operations team to onboard 90% of the customer. The other 10% would be custom configuration or one-offs. This would include modifying the customer's checklist, checklist data types, user acces, user permissions, and integration configuration. The release of this internal feature pushed many customers to production, sped up the go-live time significantly, and freed up much of my dev time. This feature has been slowly release to customers component by componenet."

KLARITY_DEMO_P1 = "Klarity's sales team size was 3 when I joined, and any one of them would go crazy for just the initial intro to a potential customer. However, getting this initial interaction could be the hardest part of the sales cycle. What they needed was something that would attract customers to us instead of the other way around"

KLARITY_DEMO_P2 = "We decided to build out a marketing demo site that allowed a user to upload a revenue contract that will go through the full prediction pipeline and send the processed document back to the user in email. The goal was the shock the demoers the potential of Klarity's AI, and so they would reach out directly to our sales team to learn more. The frontend engineer, ML engineers, and I teamed out with the marketing team to design, layout, and build the demo product which released along with the Series A accouncement."

LP_P1 = "Legacy processing is a product sold by Klarity where a customer provides a bulk load of old documents, Klarity processes them, and then reuploads it back into the account. My role in most of the legacy processing proects was to preprocess the files (file consolidation, dedup, OCR, metadata collection, signature/region detection), provide the preprocessed files to the ML engineers, and then reupload the files to the account"

LP_P2 = "These projects seem daunting at first. One of my first projects was to preprocess Klarity's largest client's files which that project had dragged on for almost half a year. However, as I got more familiar with the whole flow of things, the process became second nature, and just felt like any other task after a while."
